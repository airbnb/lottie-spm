// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-macos10.11 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Lottie
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AppKit
import Combine
import Compression
import CoreFoundation
import CoreGraphics
import CoreText
import Foundation
import QuartzCore
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ImageAsset : Lottie.Asset {
  final public let name: Swift.String
  final public let directory: Swift.String
  final public let width: Swift.Double
  final public let height: Swift.Double
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public typealias LottieControlType = AppKit.NSControl
public typealias LottieControlState = Lottie.LottieNSControlState
public enum LottieNSControlState : Swift.UInt, Swift.RawRepresentable {
  case normal
  case highlighted
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
public typealias LottieControlEvent = Lottie.LottieNSControlEvent
public struct LottieNSControlEvent : Swift.Equatable {
  public init(_ event: AppKit.NSEvent.EventType, inside: Swift.Bool)
  public static let touchDown: Lottie.LottieNSControlEvent
  public static let touchUpInside: Lottie.LottieNSControlEvent
  public static let touchUpOutside: Lottie.LottieNSControlEvent
  public var event: AppKit.NSEvent.EventType
  public var inside: Swift.Bool
  public static func == (a: Lottie.LottieNSControlEvent, b: Lottie.LottieNSControlEvent) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers public class LottieAnimationLayer : QuartzCore.CALayer {
  public init(animation: Lottie.LottieAnimation?, imageProvider: (any Lottie.AnimationImageProvider)? = nil, textProvider: any Lottie.AnimationKeypathTextProvider = DefaultTextProvider(), fontProvider: any Lottie.AnimationFontProvider = DefaultFontProvider(), configuration: Lottie.LottieConfiguration = .shared, logger: Lottie.LottieLogger = .shared)
  public init(dotLottie: Lottie.DotLottieFile?, animationId: Swift.String? = nil, textProvider: any Lottie.AnimationKeypathTextProvider = DefaultTextProvider(), fontProvider: any Lottie.AnimationFontProvider = DefaultFontProvider(), configuration: Lottie.LottieConfiguration = .shared, logger: Lottie.LottieLogger = .shared)
  public init(configuration: Lottie.LottieConfiguration = .shared, logger: Lottie.LottieLogger = .shared)
  open func play(completion: Lottie.LottieCompletionBlock? = nil)
  open func play(fromProgress: Lottie.AnimationProgressTime? = nil, toProgress: Lottie.AnimationProgressTime, loopMode: Lottie.LottieLoopMode? = nil, completion: Lottie.LottieCompletionBlock? = nil)
  open func play(fromFrame: Lottie.AnimationFrameTime? = nil, toFrame: Lottie.AnimationFrameTime, loopMode: Lottie.LottieLoopMode? = nil, completion: Lottie.LottieCompletionBlock? = nil)
  open func play(fromMarker: Swift.String? = nil, toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: Lottie.LottieLoopMode? = nil, completion: Lottie.LottieCompletionBlock? = nil)
  open func play(marker: Swift.String, loopMode: Lottie.LottieLoopMode? = nil, completion: Lottie.LottieCompletionBlock? = nil)
  open func play(markers: [Swift.String], completion: Lottie.LottieCompletionBlock? = nil)
  open func stop()
  open func pause()
  open func pause(at state: Lottie.LottiePlaybackMode.PausedState)
  @available(*, deprecated, renamed: "setPlaybackMode(_:completion:)", message: "Will be removed in a future major release.")
  open func play(_ playbackMode: Lottie.LottiePlaybackMode, animationCompletionHandler: Lottie.LottieCompletionBlock? = nil)
  open func setPlaybackMode(_ playbackMode: Lottie.LottiePlaybackMode, completion: Lottie.LottieCompletionBlock? = nil)
  open func play(_ playbackMode: Lottie.LottiePlaybackMode.PlaybackMode, completion: Lottie.LottieCompletionBlock? = nil)
  public var currentPlaybackMode: Lottie.LottiePlaybackMode? {
    get
  }
  public var valueProviders: [Lottie.AnimationKeypath : any Lottie.AnyValueProvider] {
    get
  }
  public var animationLayerDidLoad: ((_ animationLayer: Lottie.LottieAnimationLayer, _ renderingEngine: Lottie.RenderingEngineOption) -> Swift.Void)?
  public var configuration: Lottie.LottieConfiguration {
    get
    set
  }
  public var animationLayer: QuartzCore.CALayer? {
    get
  }
  public var screenScale: CoreFoundation.CGFloat {
    get
    set
  }
  public var backgroundBehavior: Lottie.LottieBackgroundBehavior {
    get
    set
  }
  public var animation: Lottie.LottieAnimation? {
    get
    set
  }
  public var animationLoaded: ((_ animationLayer: Lottie.LottieAnimationLayer, _ animation: Lottie.LottieAnimation) -> Swift.Void)? {
    get
    set
  }
  public var imageProvider: any Lottie.AnimationImageProvider {
    get
    set
  }
  public var textProvider: any Lottie.AnimationKeypathTextProvider {
    get
    set
  }
  public var fontProvider: any Lottie.AnimationFontProvider {
    get
    set
  }
  public var maskAnimationToBounds: Swift.Bool {
    get
    set
  }
  public var isAnimationPlaying: Swift.Bool {
    get
  }
  public var loopMode: Lottie.LottieLoopMode {
    get
    set
  }
  public var shouldRasterizeWhenIdle: Swift.Bool {
    get
    set
  }
  public var currentProgress: Lottie.AnimationProgressTime {
    get
    set
  }
  public var currentTime: Foundation.TimeInterval {
    get
    set
  }
  public var currentFrame: Lottie.AnimationFrameTime {
    get
    set
  }
  public var realtimeAnimationFrame: Lottie.AnimationFrameTime {
    get
  }
  public var realtimeAnimationProgress: Lottie.AnimationProgressTime {
    get
  }
  public var animationSpeed: CoreFoundation.CGFloat {
    get
    set
  }
  public var respectAnimationFrameRate: Swift.Bool {
    get
    set
  }
  public var currentRenderingEngine: Lottie.RenderingEngine? {
    get
  }
  public var mainThreadRenderingEngineShouldForceDisplayUpdateOnEachFrame: Swift.Bool {
    get
    set
  }
  public func loadAnimation(_ animationId: Swift.String? = nil, from dotLottieFile: Lottie.DotLottieFile)
  public func loadAnimation(atIndex index: Swift.Int, from dotLottieFile: Lottie.DotLottieFile)
  public func reloadImages()
  public func forceDisplayUpdate()
  public func setValueProvider(_ valueProvider: any Lottie.AnyValueProvider, keypath: Lottie.AnimationKeypath)
  public func getValue(for keypath: Lottie.AnimationKeypath, atFrame: Lottie.AnimationFrameTime?) -> Any?
  public func getOriginalValue(for keypath: Lottie.AnimationKeypath, atFrame: Lottie.AnimationFrameTime?) -> Any?
  public func logHierarchyKeypaths()
  public func allHierarchyKeypaths() -> [Swift.String]
  public func convert(_ rect: CoreFoundation.CGRect, toLayerAt keypath: Lottie.AnimationKeypath?) -> CoreFoundation.CGRect?
  public func convert(_ point: CoreFoundation.CGPoint, toLayerAt keypath: Lottie.AnimationKeypath?) -> CoreFoundation.CGPoint?
  public func setNodeIsEnabled(isEnabled: Swift.Bool, keypath: Lottie.AnimationKeypath)
  public func progressTime(forMarker named: Swift.String) -> Lottie.AnimationProgressTime?
  public func frameTime(forMarker named: Swift.String) -> Lottie.AnimationFrameTime?
  public func durationFrameTime(forMarker named: Swift.String) -> Lottie.AnimationFrameTime?
  public func updateAnimationForBackgroundState()
  public func updateAnimationForForegroundState(wasWaitingToPlayAnimation: Swift.Bool)
  @objc deinit
}
extension QuartzCore.CALayer {
  @nonobjc public func logLayerTree(withIndent: Swift.Int = 0)
}
public protocol AnimationFontProvider {
  func fontFor(family: Swift.String, size: CoreFoundation.CGFloat) -> CoreText.CTFont?
}
final public class DefaultFontProvider : Lottie.AnimationFontProvider {
  public init()
  final public func fontFor(family: Swift.String, size: CoreFoundation.CGFloat) -> CoreText.CTFont?
  @objc deinit
}
extension Lottie.DefaultFontProvider : Swift.Equatable {
  public static func == (_: Lottie.DefaultFontProvider, _: Lottie.DefaultFontProvider) -> Swift.Bool
}
public enum LottieAnimationCache {
  public static var shared: (any Lottie.AnimationCacheProvider)?
}
public class FilepathImageProvider : Lottie.AnimationImageProvider {
  public init(filepath: Swift.String, contentsGravity: QuartzCore.CALayerContentsGravity = .resize)
  public init(filepath: Foundation.URL, contentsGravity: QuartzCore.CALayerContentsGravity = .resize)
  public func imageForAsset(asset: Lottie.ImageAsset) -> CoreGraphics.CGImage?
  public func contentsGravity(for _: Lottie.ImageAsset) -> QuartzCore.CALayerContentsGravity
  @objc deinit
}
extension Lottie.FilepathImageProvider : Swift.Equatable {
  public static func == (lhs: Lottie.FilepathImageProvider, rhs: Lottie.FilepathImageProvider) -> Swift.Bool
}
public class DefaultAnimationCache : Lottie.AnimationCacheProvider {
  public init()
  public static let sharedCache: Lottie.DefaultAnimationCache
  public var cacheSize: Swift.Int {
    get
    set
  }
  public func clearCache()
  public func animation(forKey key: Swift.String) -> Lottie.LottieAnimation?
  public func setAnimation(_ animation: Lottie.LottieAnimation, forKey key: Swift.String)
  @objc deinit
}
extension Lottie.DefaultAnimationCache : @unchecked Swift.Sendable {
}
public protocol AnimationKeypathTextProvider : AnyObject {
  func text(for keypath: Lottie.AnimationKeypath, sourceText: Swift.String) -> Swift.String?
}
@available(*, deprecated, message: "`AnimationKeypathTextProvider` has been deprecated and renamed to `LegacyAnimationTextProvider`. Instead, conform to `AnimationKeypathTextProvider` instead or conform to `LegacyAnimationTextProvider` explicitly.")
public typealias AnimationTextProvider = Lottie.LegacyAnimationTextProvider
public protocol LegacyAnimationTextProvider : Lottie.AnimationKeypathTextProvider {
  func textFor(keypathName: Swift.String, sourceText: Swift.String) -> Swift.String
}
extension Lottie.LegacyAnimationTextProvider {
  public func text(for _: Lottie.AnimationKeypath, sourceText _: Swift.String) -> Swift.String?
}
final public class DictionaryTextProvider : Lottie.AnimationKeypathTextProvider, Lottie.LegacyAnimationTextProvider {
  public init(_ values: [Swift.String : Swift.String])
  final public func text(for keypath: Lottie.AnimationKeypath, sourceText: Swift.String) -> Swift.String?
  final public func textFor(keypathName: Swift.String, sourceText: Swift.String) -> Swift.String
  @objc deinit
}
extension Lottie.DictionaryTextProvider : Swift.Equatable {
  public static func == (lhs: Lottie.DictionaryTextProvider, rhs: Lottie.DictionaryTextProvider) -> Swift.Bool
}
final public class DefaultTextProvider : Lottie.AnimationKeypathTextProvider, Lottie.LegacyAnimationTextProvider {
  public init()
  final public func textFor(keypathName _: Swift.String, sourceText: Swift.String) -> Swift.String
  final public func text(for _: Lottie.AnimationKeypath, sourceText: Swift.String) -> Swift.String
  @objc deinit
}
extension Lottie.DefaultTextProvider : Swift.Equatable {
  public static func == (_: Lottie.DefaultTextProvider, _: Lottie.DefaultTextProvider) -> Swift.Bool
}
public enum CoordinateSpace : Swift.Int, Swift.Codable, Swift.Sendable {
  case type2d
  case type3d
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
final public class LottieAnimation : Swift.Codable, Swift.Sendable {
  required public init(from decoder: any Swift.Decoder) throws
  public init(dictionary: [Swift.String : Any]) throws
  final public let startFrame: Lottie.AnimationFrameTime
  final public let endFrame: Lottie.AnimationFrameTime
  final public let framerate: Swift.Double
  final public var markerNames: [Swift.String] {
    get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
public struct LottieButton {
  public init(animation: Lottie.LottieAnimation?, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public func configure(_ configure: @escaping (Lottie.AnimatedButton) -> Swift.Void) -> Lottie.LottieButton
  public func configuration(_ configuration: Lottie.LottieConfiguration) -> Lottie.LottieButton
  public func animate(fromProgress: Lottie.AnimationProgressTime, toProgress: Lottie.AnimationProgressTime, on event: Lottie.LottieControlEvent) -> Lottie.LottieButton
  public func animate(fromMarker: Swift.String, toMarker: Swift.String, on event: Lottie.LottieControlEvent) -> Lottie.LottieButton
  public func valueProvider<ValueProvider>(_ valueProvider: ValueProvider, for keypath: Lottie.AnimationKeypath) -> Lottie.LottieButton where ValueProvider : Lottie.AnyValueProvider, ValueProvider : Swift.Equatable
  public typealias Body = @_opaqueReturnTypeOf("$s6Lottie0A6ButtonV4bodyQrvp", 0) __
}
public protocol AnimationCacheProvider : AnyObject, Swift.Sendable {
  func animation(forKey: Swift.String) -> Lottie.LottieAnimation?
  func setAnimation(_ animation: Lottie.LottieAnimation, forKey: Swift.String)
  func clearCache()
}
public typealias LottieCompletionBlock = (_ completed: Swift.Bool) -> Swift.Void
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AnimatedSwitch : Lottie.AnimatedControl {
  @_Concurrency.MainActor(unsafe) override public init(animation: Lottie.LottieAnimation?, configuration: Lottie.LottieConfiguration = .shared)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override open func animationDidSet()
  @_Concurrency.MainActor(unsafe) open func handle(_ event: Lottie.LottieNSControlEvent)
  public enum CancelBehavior {
    case reverse
    case none
    public static func == (a: Lottie.AnimatedSwitch.CancelBehavior, b: Lottie.AnimatedSwitch.CancelBehavior) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var cancelBehavior: Lottie.AnimatedSwitch.CancelBehavior
  @_Concurrency.MainActor(unsafe) public var animateUpdateWhenChangingAnimation: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var stateUpdated: ((_ isOn: Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var isOn: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func setIsOn(_ isOn: Swift.Bool, animated: Swift.Bool, shouldFireHaptics: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func setProgressForState(fromProgress: Lottie.AnimationProgressTime, toProgress: Lottie.AnimationProgressTime, forOnState: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Asset : Swift.Codable {
  required public init(from decoder: any Swift.Decoder) throws
  final public let id: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
extension Lottie.Asset : @unchecked Swift.Sendable {
}
public class BundleImageProvider : Lottie.AnimationImageProvider {
  public init(bundle: Foundation.Bundle, searchPath: Swift.String?, contentsGravity: QuartzCore.CALayerContentsGravity = .resize)
  public func imageForAsset(asset: Lottie.ImageAsset) -> CoreGraphics.CGImage?
  public func contentsGravity(for _: Lottie.ImageAsset) -> QuartzCore.CALayerContentsGravity
  @objc deinit
}
extension Lottie.BundleImageProvider : Swift.Equatable {
  public static func == (lhs: Lottie.BundleImageProvider, rhs: Lottie.BundleImageProvider) -> Swift.Bool
}
final public class SizeValueProvider {
  public init(block: @escaping Lottie.SizeValueProvider.SizeValueBlock)
  public init(_ size: CoreFoundation.CGSize)
  public typealias SizeValueBlock = (CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  final public var size: CoreFoundation.CGSize {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: Lottie.ValueProviderStorage<Lottie.LottieVector3D> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension Lottie.SizeValueProvider : Swift.Equatable {
  public static func == (lhs: Lottie.SizeValueProvider, rhs: Lottie.SizeValueProvider) -> Swift.Bool
}
infix operator +| : DefaultPrecedence
infix operator +- : DefaultPrecedence
@objc @_Concurrency.MainActor(unsafe) open class AnimatedControl : Lottie.LottieControlType {
  @_Concurrency.MainActor(unsafe) public init(animation: Lottie.LottieAnimation?, configuration: Lottie.LottieConfiguration = .shared)
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mouseDown(with mouseDownEvent: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) open func animationDidSet()
  @_Concurrency.MainActor(unsafe) final public let animationView: Lottie.LottieAnimationView
  @_Concurrency.MainActor(unsafe) public var animation: Lottie.LottieAnimation? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var animationSpeed: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func setLayer(named: Swift.String, forState: Lottie.LottieControlState)
  @_Concurrency.MainActor(unsafe) public func setValueProvider(_ valueProvider: any Lottie.AnyValueProvider, keypath: Lottie.AnimationKeypath)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AnimatedButton : Lottie.AnimatedControl {
  @_Concurrency.MainActor(unsafe) override public init(animation: Lottie.LottieAnimation?, configuration: Lottie.LottieConfiguration = .shared)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func handle(_ event: Lottie.LottieNSControlEvent)
  @_Concurrency.MainActor(unsafe) public var performAction: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public func setPlayRange(fromProgress: Lottie.AnimationProgressTime, toProgress: Lottie.AnimationProgressTime, event: Lottie.LottieControlEvent)
  @_Concurrency.MainActor(unsafe) public func setPlayRange(fromMarker fromName: Swift.String, toMarker toName: Swift.String, event: Lottie.LottieControlEvent)
  @objc deinit
}
public typealias AnimationFrameTime = CoreFoundation.CGFloat
public typealias AnimationProgressTime = CoreFoundation.CGFloat
public enum ColorFormatDenominator : Swift.Hashable {
  case One
  case OneHundred
  case TwoFiftyFive
  public static func == (a: Lottie.ColorFormatDenominator, b: Lottie.ColorFormatDenominator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct LottieColor : Swift.Hashable {
  public var r: Swift.Double
  public var g: Swift.Double
  public var b: Swift.Double
  public var a: Swift.Double
  public init(r: Swift.Double, g: Swift.Double, b: Swift.Double, a: Swift.Double, denominator: Lottie.ColorFormatDenominator = .One)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: Lottie.LottieColor, b: Lottie.LottieColor) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class ColorValueProvider {
  public init(block: @escaping Lottie.ColorValueProvider.ColorValueBlock)
  public init(_ color: Lottie.LottieColor)
  public init(_ keyframes: [Lottie.Keyframe<Lottie.LottieColor>])
  public typealias ColorValueBlock = (CoreFoundation.CGFloat) -> Lottie.LottieColor
  final public var color: Lottie.LottieColor {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: Lottie.ValueProviderStorage<Lottie.LottieColor> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension Lottie.ColorValueProvider : Swift.Equatable {
  public static func == (lhs: Lottie.ColorValueProvider, rhs: Lottie.ColorValueProvider) -> Swift.Bool
}
public struct AnimationKeypath : Swift.Hashable, Swift.ExpressibleByStringLiteral {
  public init(keypath: Swift.String)
  public init(stringLiteral: Swift.String)
  public init(keys: [Swift.String])
  public var keys: [Swift.String] {
    get
  }
  public var string: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: Lottie.AnimationKeypath, b: Lottie.AnimationKeypath) -> Swift.Bool
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
public struct LottieConfiguration : Swift.Hashable {
  public init(renderingEngine: Lottie.RenderingEngineOption = .automatic, decodingStrategy: Lottie.DecodingStrategy = .dictionaryBased, colorSpace: CoreGraphics.CGColorSpace = CGColorSpaceCreateDeviceRGB(), reducedMotionOption: Lottie.ReducedMotionOption = .systemReducedMotionToggle)
  public static var shared: Lottie.LottieConfiguration
  public var renderingEngine: Lottie.RenderingEngineOption
  public var decodingStrategy: Lottie.DecodingStrategy
  public var reducedMotionOption: Lottie.ReducedMotionOption
  public var colorSpace: CoreGraphics.CGColorSpace
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: Lottie.LottieConfiguration, b: Lottie.LottieConfiguration) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension Lottie.LottieVector1D : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct LottieVector2D : Swift.Codable, Swift.Hashable, Swift.Sendable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: Lottie.LottieVector2D, b: Lottie.LottieVector2D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension Lottie.LottieVector3D : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension Lottie.LottieVector3D {
  public var pointValue: CoreFoundation.CGPoint {
    get
  }
  public var sizeValue: CoreFoundation.CGSize {
    get
  }
}
public enum LottieAnimationSource : Swift.Sendable {
  case lottieAnimation(Lottie.LottieAnimation)
  case dotLottieFile(Lottie.DotLottieFile)
}
extension Lottie.LottieAnimation {
  final public var animationSource: Lottie.LottieAnimationSource {
    get
  }
}
extension Lottie.DotLottieFile {
  final public var animationSource: Lottie.LottieAnimationSource {
    get
  }
}
extension Lottie.LottieAnimationView {
  @_Concurrency.MainActor(unsafe) convenience public init(name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, imageProvider: (any Lottie.AnimationImageProvider)? = nil, animationCache: (any Lottie.AnimationCacheProvider)? = LottieAnimationCache.shared, configuration: Lottie.LottieConfiguration = .shared)
  @_Concurrency.MainActor(unsafe) convenience public init(filePath: Swift.String, imageProvider: (any Lottie.AnimationImageProvider)? = nil, animationCache: (any Lottie.AnimationCacheProvider)? = LottieAnimationCache.shared, configuration: Lottie.LottieConfiguration = .shared)
  @_Concurrency.MainActor(unsafe) convenience public init(url: Foundation.URL, imageProvider: (any Lottie.AnimationImageProvider)? = nil, session: Foundation.URLSession = .shared, closure: @escaping Lottie.LottieAnimationView.DownloadClosure, animationCache: (any Lottie.AnimationCacheProvider)? = LottieAnimationCache.shared, configuration: Lottie.LottieConfiguration = .shared)
  @_Concurrency.MainActor(unsafe) convenience public init(asset name: Swift.String, bundle: Foundation.Bundle = Bundle.main, imageProvider: (any Lottie.AnimationImageProvider)? = nil, animationCache: (any Lottie.AnimationCacheProvider)? = LottieAnimationCache.shared, configuration: Lottie.LottieConfiguration = .shared)
  @_Concurrency.MainActor(unsafe) convenience public init(dotLottieName name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, animationId: Swift.String? = nil, dotLottieCache: (any Lottie.DotLottieCacheProvider)? = DotLottieCache.sharedCache, configuration: Lottie.LottieConfiguration = .shared, completion: ((Lottie.LottieAnimationView, (any Swift.Error)?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) convenience public init(dotLottieFilePath filePath: Swift.String, animationId: Swift.String? = nil, dotLottieCache: (any Lottie.DotLottieCacheProvider)? = DotLottieCache.sharedCache, configuration: Lottie.LottieConfiguration = .shared, completion: ((Lottie.LottieAnimationView, (any Swift.Error)?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) convenience public init(dotLottieUrl url: Foundation.URL, animationId: Swift.String? = nil, dotLottieCache: (any Lottie.DotLottieCacheProvider)? = DotLottieCache.sharedCache, configuration: Lottie.LottieConfiguration = .shared, session: Foundation.URLSession = .shared, completion: ((Lottie.LottieAnimationView, (any Swift.Error)?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) convenience public init(dotLottieAsset name: Swift.String, bundle: Foundation.Bundle = Bundle.main, animationId: Swift.String? = nil, dotLottieCache: (any Lottie.DotLottieCacheProvider)? = DotLottieCache.sharedCache, configuration: Lottie.LottieConfiguration = .shared, completion: ((Lottie.LottieAnimationView, (any Swift.Error)?) -> Swift.Void)? = nil)
  public typealias DownloadClosure = ((any Swift.Error)?) -> Swift.Void
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class AnimationSubview : AppKit.NSView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame frameRect: Foundation.NSRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol AnyValueProvider {
  var valueType: any Any.Type { get }
  var typeErasedStorage: Lottie.AnyValueProviderStorage { get }
  func hasUpdate(frame: Lottie.AnimationFrameTime) -> Swift.Bool
}
extension Lottie.AnyValueProvider {
  public func value(frame: Lottie.AnimationFrameTime) -> Any
}
public enum ValueProviderStorage<T> where T : Lottie.AnyInterpolatable {
  case singleValue(T)
  case keyframes([Lottie.Keyframe<T>])
  case closure((Lottie.AnimationFrameTime) -> T)
}
public enum AnyValueProviderStorage {
  case singleValue(Any)
  case keyframes([Lottie.Keyframe<Any>], interpolate: (Lottie.AnimationFrameTime) -> Any)
  case closure((Lottie.AnimationFrameTime) -> Any)
}
public enum RenderingEngineOption : Swift.Hashable {
  case automatic
  case specific(Lottie.RenderingEngine)
  public static var mainThread: Lottie.RenderingEngineOption {
    get
  }
  public static var coreAnimation: Lottie.RenderingEngineOption {
    get
  }
}
public enum RenderingEngine : Swift.Hashable {
  case mainThread
  case coreAnimation
}
extension Lottie.RenderingEngineOption : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
extension Lottie.RenderingEngine : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
public struct LottieVector1D : Swift.Hashable, Swift.Sendable {
  public init(_ value: Swift.Double)
  public let value: Swift.Double
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: Lottie.LottieVector1D, b: Lottie.LottieVector1D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct LottieVector3D : Swift.Hashable, Swift.Sendable {
  public let x: Swift.Double
  public let y: Swift.Double
  public let z: Swift.Double
  public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: Lottie.LottieVector3D, b: Lottie.LottieVector3D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum LottieBackgroundBehavior {
  case stop
  case pause
  case pauseAndRestore
  case forceFinish
  case continuePlaying
  public static func `default`(for renderingEngine: Lottie.RenderingEngine) -> Lottie.LottieBackgroundBehavior
  public static func == (a: Lottie.LottieBackgroundBehavior, b: Lottie.LottieBackgroundBehavior) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum LottieLoopMode : Swift.Hashable {
  case playOnce
  case loop
  case autoReverse
  case `repeat`(Swift.Float)
  case repeatBackwards(Swift.Float)
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Lottie.LottieLoopMode : Swift.Equatable {
  public static func == (lhs: Lottie.LottieLoopMode, rhs: Lottie.LottieLoopMode) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class LottieAnimationView : Lottie.LottieAnimationViewBase {
  @_Concurrency.MainActor(unsafe) public init(animation: Lottie.LottieAnimation?, imageProvider: (any Lottie.AnimationImageProvider)? = nil, textProvider: any Lottie.AnimationKeypathTextProvider = DefaultTextProvider(), fontProvider: any Lottie.AnimationFontProvider = DefaultFontProvider(), configuration: Lottie.LottieConfiguration = .shared, logger: Lottie.LottieLogger = .shared)
  @_Concurrency.MainActor(unsafe) public init(dotLottie: Lottie.DotLottieFile?, animationId: Swift.String? = nil, textProvider: any Lottie.AnimationKeypathTextProvider = DefaultTextProvider(), fontProvider: any Lottie.AnimationFontProvider = DefaultFontProvider(), configuration: Lottie.LottieConfiguration = .shared, logger: Lottie.LottieLogger = .shared)
  @_Concurrency.MainActor(unsafe) public init(configuration: Lottie.LottieConfiguration = .shared, logger: Lottie.LottieLogger = .shared)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func play(_ mode: Lottie.LottiePlaybackMode.PlaybackMode, completion: Lottie.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor(unsafe) open func play(completion: Lottie.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor(unsafe) open func play(fromProgress: Lottie.AnimationProgressTime? = nil, toProgress: Lottie.AnimationProgressTime, loopMode: Lottie.LottieLoopMode? = nil, completion: Lottie.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor(unsafe) open func play(fromFrame: Lottie.AnimationFrameTime? = nil, toFrame: Lottie.AnimationFrameTime, loopMode: Lottie.LottieLoopMode? = nil, completion: Lottie.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor(unsafe) open func play(fromMarker: Swift.String? = nil, toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: Lottie.LottieLoopMode? = nil, completion: Lottie.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor(unsafe) open func play(marker: Swift.String, loopMode: Lottie.LottieLoopMode? = nil, completion: Lottie.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor(unsafe) open func play(markers: [Swift.String], completion: Lottie.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor(unsafe) open func stop()
  @_Concurrency.MainActor(unsafe) open func pause()
  @available(*, deprecated, renamed: "setPlaybackMode(_:completion:)", message: "Will be removed in a future major release.")
  @_Concurrency.MainActor(unsafe) open func play(_ playbackMode: Lottie.LottiePlaybackMode, animationCompletionHandler: Lottie.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor(unsafe) open func setPlaybackMode(_ playbackMode: Lottie.LottiePlaybackMode, completion: Lottie.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor(unsafe) public var animateLayoutChangesWithCurrentCoreAnimationContext: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var configuration: Lottie.LottieConfiguration {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var valueProviders: [Lottie.AnimationKeypath : any Lottie.AnyValueProvider] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var backgroundBehavior: Lottie.LottieBackgroundBehavior {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var animation: Lottie.LottieAnimation? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var animationLoaded: ((_ animationView: Lottie.LottieAnimationView, _ animation: Lottie.LottieAnimation) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var imageProvider: any Lottie.AnimationImageProvider {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var textProvider: any Lottie.AnimationKeypathTextProvider {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var fontProvider: any Lottie.AnimationFontProvider {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maskAnimationToBounds: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isAnimationPlaying: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isAnimationQueued: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var loopMode: Lottie.LottieLoopMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var shouldRasterizeWhenIdle: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var currentProgress: Lottie.AnimationProgressTime {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var currentTime: Foundation.TimeInterval {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var currentFrame: Lottie.AnimationFrameTime {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var realtimeAnimationFrame: Lottie.AnimationFrameTime {
    get
  }
  @_Concurrency.MainActor(unsafe) public var realtimeAnimationProgress: Lottie.AnimationProgressTime {
    get
  }
  @_Concurrency.MainActor(unsafe) public var animationSpeed: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var respectAnimationFrameRate: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var viewportFrame: CoreFoundation.CGRect? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var currentRenderingEngine: Lottie.RenderingEngine? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var currentPlaybackMode: Lottie.LottiePlaybackMode? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var mainThreadRenderingEngineShouldForceDisplayUpdateOnEachFrame: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func loadAnimation(_ animationId: Swift.String? = nil, from dotLottieFile: Lottie.DotLottieFile)
  @_Concurrency.MainActor(unsafe) public func loadAnimation(atIndex index: Swift.Int, from dotLottieFile: Lottie.DotLottieFile)
  @_Concurrency.MainActor(unsafe) public func reloadImages()
  @_Concurrency.MainActor(unsafe) public func forceDisplayUpdate()
  @_Concurrency.MainActor(unsafe) public func setValueProvider(_ valueProvider: any Lottie.AnyValueProvider, keypath: Lottie.AnimationKeypath)
  @_Concurrency.MainActor(unsafe) public func getValue(for keypath: Lottie.AnimationKeypath, atFrame: Lottie.AnimationFrameTime?) -> Any?
  @_Concurrency.MainActor(unsafe) public func getOriginalValue(for keypath: Lottie.AnimationKeypath, atFrame: Lottie.AnimationFrameTime?) -> Any?
  @_Concurrency.MainActor(unsafe) public func logHierarchyKeypaths()
  @_Concurrency.MainActor(unsafe) public func allHierarchyKeypaths() -> [Swift.String]
  @_Concurrency.MainActor(unsafe) public func addSubview(_ subview: Lottie.AnimationSubview, forLayerAt keypath: Lottie.AnimationKeypath)
  @_Concurrency.MainActor(unsafe) public func convert(_ rect: CoreFoundation.CGRect, toLayerAt keypath: Lottie.AnimationKeypath?) -> CoreFoundation.CGRect?
  @_Concurrency.MainActor(unsafe) public func convert(_ point: CoreFoundation.CGPoint, toLayerAt keypath: Lottie.AnimationKeypath?) -> CoreFoundation.CGPoint?
  @_Concurrency.MainActor(unsafe) public func setNodeIsEnabled(isEnabled: Swift.Bool, keypath: Lottie.AnimationKeypath)
  @_Concurrency.MainActor(unsafe) public func progressTime(forMarker named: Swift.String) -> Lottie.AnimationProgressTime?
  @_Concurrency.MainActor(unsafe) public func frameTime(forMarker named: Swift.String) -> Lottie.AnimationFrameTime?
  @_Concurrency.MainActor(unsafe) public func durationFrameTime(forMarker named: Swift.String) -> Lottie.AnimationFrameTime?
  @objc deinit
}
public enum DotLottieError : Swift.Error {
  case noDataLoaded
  case assetNotFound(name: Swift.String, bundle: Foundation.Bundle?)
  case loadingFromAssetNotSupported
  @available(*, deprecated, message: "Unused")
  case invalidFileFormat
  @available(*, deprecated, message: "Unused")
  case invalidData
  @available(*, deprecated, message: "Unused")
  case animationNotAvailable
}
final public class FloatValueProvider {
  public init(block: @escaping Lottie.FloatValueProvider.CGFloatValueBlock)
  public init(_ float: CoreFoundation.CGFloat)
  public typealias CGFloatValueBlock = (CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  final public var float: CoreFoundation.CGFloat {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: Lottie.ValueProviderStorage<Lottie.LottieVector1D> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension Lottie.FloatValueProvider : Swift.Equatable {
  public static func == (lhs: Lottie.FloatValueProvider, rhs: Lottie.FloatValueProvider) -> Swift.Bool
}
public enum LottiePlaybackMode : Swift.Hashable {
  case paused(at: Lottie.LottiePlaybackMode.PausedState)
  case playing(_: Lottie.LottiePlaybackMode.PlaybackMode)
  @available(*, deprecated, renamed: "LottiePlaybackMode.paused(at:)", message: "Will be removed in a future major release.")
  case progress(_: Lottie.AnimationProgressTime)
  @available(*, deprecated, renamed: "LottiePlaybackMode.paused(at:)", message: "Will be removed in a future major release.")
  case frame(_: Lottie.AnimationFrameTime)
  @available(*, deprecated, renamed: "LottiePlaybackMode.paused(at:)", message: "Will be removed in a future major release.")
  case time(_: Foundation.TimeInterval)
  @available(*, deprecated, renamed: "LottiePlaybackMode.paused(at:)", message: "Will be removed in a future major release.")
  case pause
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  case fromProgress(_: Lottie.AnimationProgressTime?, toProgress: Lottie.AnimationProgressTime, loopMode: Lottie.LottieLoopMode)
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  case fromFrame(_: Lottie.AnimationFrameTime?, toFrame: Lottie.AnimationFrameTime, loopMode: Lottie.LottieLoopMode)
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  case fromMarker(_: Swift.String?, toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: Lottie.LottieLoopMode)
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  case marker(_: Swift.String, loopMode: Lottie.LottieLoopMode)
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  case markers(_: [Swift.String])
  public enum PausedState : Swift.Hashable {
    case currentFrame
    case progress(_: Lottie.AnimationProgressTime)
    case frame(_: Lottie.AnimationFrameTime)
    case time(_: Foundation.TimeInterval)
    case marker(_: Swift.String, position: Lottie.LottieMarkerPosition = .start)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: Lottie.LottiePlaybackMode.PausedState, b: Lottie.LottiePlaybackMode.PausedState) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum PlaybackMode : Swift.Hashable {
    case fromProgress(_: Lottie.AnimationProgressTime?, toProgress: Lottie.AnimationProgressTime, loopMode: Lottie.LottieLoopMode)
    case fromFrame(_: Lottie.AnimationFrameTime?, toFrame: Lottie.AnimationFrameTime, loopMode: Lottie.LottieLoopMode)
    case fromMarker(_: Swift.String?, toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: Lottie.LottieLoopMode)
    case marker(_: Swift.String, loopMode: Lottie.LottieLoopMode)
    case markers(_: [Swift.String])
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: Lottie.LottiePlaybackMode.PlaybackMode, b: Lottie.LottiePlaybackMode.PlaybackMode) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: Lottie.LottiePlaybackMode, b: Lottie.LottiePlaybackMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension Lottie.LottiePlaybackMode {
  public static var paused: Lottie.LottiePlaybackMode {
    get
  }
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  public static func toProgress(_ toProgress: Lottie.AnimationProgressTime, loopMode: Lottie.LottieLoopMode) -> Lottie.LottiePlaybackMode
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  public static func toFrame(_ toFrame: Lottie.AnimationFrameTime, loopMode: Lottie.LottieLoopMode) -> Lottie.LottiePlaybackMode
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  public static func toMarker(_ toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: Lottie.LottieLoopMode) -> Lottie.LottiePlaybackMode
}
extension Lottie.LottiePlaybackMode.PlaybackMode {
  public static func toProgress(_ toProgress: Lottie.AnimationProgressTime, loopMode: Lottie.LottieLoopMode) -> Lottie.LottiePlaybackMode.PlaybackMode
  public static func toFrame(_ toFrame: Lottie.AnimationFrameTime, loopMode: Lottie.LottieLoopMode) -> Lottie.LottiePlaybackMode.PlaybackMode
  public static func toMarker(_ toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: Lottie.LottieLoopMode) -> Lottie.LottiePlaybackMode.PlaybackMode
}
public enum LottieMarkerPosition : Swift.Hashable {
  case start
  case end
  public static func == (a: Lottie.LottieMarkerPosition, b: Lottie.LottieMarkerPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Lottie.LottieColor : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension Lottie.DotLottieFile {
  public enum SynchronouslyBlockingCurrentThread {
    public static func loadedFrom(filepath: Swift.String, dotLottieCache: (any Lottie.DotLottieCacheProvider)? = DotLottieCache.sharedCache) -> Swift.Result<Lottie.DotLottieFile, any Swift.Error>
    public static func named(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, dotLottieCache: (any Lottie.DotLottieCacheProvider)? = DotLottieCache.sharedCache) -> Swift.Result<Lottie.DotLottieFile, any Swift.Error>
    public static func loadedFrom(data: Foundation.Data, filename: Swift.String) -> Swift.Result<Lottie.DotLottieFile, any Swift.Error>
  }
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
  public static func named(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, dotLottieCache: (any Lottie.DotLottieCacheProvider)? = DotLottieCache.sharedCache) async throws -> Lottie.DotLottieFile
  #endif
  public static func named(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, dotLottieCache: (any Lottie.DotLottieCacheProvider)? = DotLottieCache.sharedCache, dispatchQueue: Dispatch.DispatchQueue = .dotLottie, handleResult: @escaping (Swift.Result<Lottie.DotLottieFile, any Swift.Error>) -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
  public static func loadedFrom(filepath: Swift.String, dotLottieCache: (any Lottie.DotLottieCacheProvider)? = DotLottieCache.sharedCache) async throws -> Lottie.DotLottieFile
  #endif
  public static func loadedFrom(filepath: Swift.String, dotLottieCache: (any Lottie.DotLottieCacheProvider)? = DotLottieCache.sharedCache, dispatchQueue: Dispatch.DispatchQueue = .dotLottie, handleResult: @escaping (Swift.Result<Lottie.DotLottieFile, any Swift.Error>) -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
  public static func asset(named name: Swift.String, bundle: Foundation.Bundle = Bundle.main, dotLottieCache: (any Lottie.DotLottieCacheProvider)? = DotLottieCache.sharedCache) async throws -> Lottie.DotLottieFile
  #endif
  public static func asset(named name: Swift.String, bundle: Foundation.Bundle = Bundle.main, dotLottieCache: (any Lottie.DotLottieCacheProvider)? = DotLottieCache.sharedCache, dispatchQueue: Dispatch.DispatchQueue = .dotLottie, handleResult: @escaping (Swift.Result<Lottie.DotLottieFile, any Swift.Error>) -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
  public static func loadedFrom(url: Foundation.URL, session: Foundation.URLSession = .shared, dotLottieCache: (any Lottie.DotLottieCacheProvider)? = DotLottieCache.sharedCache) async throws -> Lottie.DotLottieFile
  #endif
  public static func loadedFrom(url: Foundation.URL, session: Foundation.URLSession = .shared, dotLottieCache: (any Lottie.DotLottieCacheProvider)? = DotLottieCache.sharedCache, handleResult: @escaping (Swift.Result<Lottie.DotLottieFile, any Swift.Error>) -> Swift.Void)
  public static func loadedFrom(data: Foundation.Data, filename: Swift.String, dispatchQueue: Dispatch.DispatchQueue = .dotLottie, handleResult: @escaping (Swift.Result<Lottie.DotLottieFile, any Swift.Error>) -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
  public static func loadedFrom(data: Foundation.Data, filename: Swift.String, dispatchQueue: Dispatch.DispatchQueue = .dotLottie) async throws -> Lottie.DotLottieFile
  #endif
}
extension Dispatch.DispatchQueue {
  public static let dotLottie: Dispatch.DispatchQueue
}
public protocol DotLottieCacheProvider : Swift.Sendable {
  func file(forKey: Swift.String) -> Lottie.DotLottieFile?
  func setFile(_ lottie: Lottie.DotLottieFile, forKey: Swift.String)
  func clearCache()
}
@available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
public struct LottieView<Placeholder> where Placeholder : SwiftUI.View {
  public init(animation: Lottie.LottieAnimation?) where Placeholder == SwiftUI.EmptyView
  public init(dotLottieFile: Lottie.DotLottieFile?) where Placeholder == SwiftUI.EmptyView
  #if compiler(>=5.3) && $AsyncAwait
  public init(_ loadAnimation: @escaping () async throws -> Lottie.LottieAnimation?) where Placeholder == SwiftUI.EmptyView
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public init(_ loadAnimation: @escaping () async throws -> Lottie.LottieAnimation?, @SwiftUI.ViewBuilder placeholder: @escaping (() -> Placeholder))
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public init(_ loadDotLottieFile: @escaping () async throws -> Lottie.DotLottieFile?) where Placeholder == SwiftUI.EmptyView
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public init(_ loadDotLottieFile: @escaping () async throws -> Lottie.DotLottieFile?, @SwiftUI.ViewBuilder placeholder: @escaping (() -> Placeholder))
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public init(_ loadAnimation: @escaping () async throws -> Lottie.LottieAnimationSource?) where Placeholder == SwiftUI.EmptyView
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public init(_ loadAnimation: @escaping () async throws -> Lottie.LottieAnimationSource?, @SwiftUI.ViewBuilder placeholder: @escaping () -> Placeholder)
  #endif
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public func configure(_ configure: @escaping (Lottie.LottieAnimationView) -> Swift.Void) -> Lottie.LottieView<Placeholder>
  public func resizable() -> Lottie.LottieView<Placeholder>
  @available(*, deprecated, renamed: "playing()", message: "Will be removed in a future major release.")
  public func play() -> Lottie.LottieView<Placeholder>
  public func looping() -> Lottie.LottieView<Placeholder>
  @available(*, deprecated, renamed: "playing(_:)", message: "Will be removed in a future major release.")
  public func play(loopMode: Lottie.LottieLoopMode = .playOnce) -> Lottie.LottieView<Placeholder>
  @available(*, deprecated, renamed: "playbackMode(_:)", message: "Will be removed in a future major release.")
  public func play(_ playbackMode: Lottie.LottiePlaybackMode) -> Lottie.LottieView<Placeholder>
  public func playing(_ mode: Lottie.LottiePlaybackMode.PlaybackMode) -> Lottie.LottieView<Placeholder>
  public func playing(loopMode: Lottie.LottieLoopMode) -> Lottie.LottieView<Placeholder>
  public func playing() -> Lottie.LottieView<Placeholder>
  public func paused(at state: Lottie.LottiePlaybackMode.PausedState = .currentFrame) -> Lottie.LottieView<Placeholder>
  public func playbackMode(_ playbackMode: Lottie.LottiePlaybackMode) -> Lottie.LottieView<Placeholder>
  public func animationSpeed(_ animationSpeed: Swift.Double) -> Lottie.LottieView<Placeholder>
  public func animationDidLoad(_ animationDidLoad: @escaping (Lottie.LottieAnimationSource) -> Swift.Void) -> Lottie.LottieView<Placeholder>
  public func animationDidFinish(_ animationCompletionHandler: Lottie.LottieCompletionBlock?) -> Lottie.LottieView<Placeholder>
  public func backgroundBehavior(_ value: Lottie.LottieBackgroundBehavior) -> Lottie.LottieView<Placeholder>
  public func accessibilityLabel(_ accessibilityLabel: Swift.String?) -> Lottie.LottieView<Placeholder>
  public func configuration(_ configuration: Lottie.LottieConfiguration) -> Lottie.LottieView<Placeholder>
  public func logger(_ logger: Lottie.LottieLogger) -> Lottie.LottieView<Placeholder>
  public func imageProvider<ImageProvider>(_ imageProvider: ImageProvider) -> Lottie.LottieView<Placeholder> where ImageProvider : Lottie.AnimationImageProvider, ImageProvider : Swift.Equatable
  public func textProvider<TextProvider>(_ textProvider: TextProvider) -> Lottie.LottieView<Placeholder> where TextProvider : Lottie.AnimationKeypathTextProvider, TextProvider : Swift.Equatable
  public func fontProvider<FontProvider>(_ fontProvider: FontProvider) -> Lottie.LottieView<Placeholder> where FontProvider : Lottie.AnimationFontProvider, FontProvider : Swift.Equatable
  public func valueProvider<ValueProvider>(_ valueProvider: ValueProvider, for keypath: Lottie.AnimationKeypath) -> Lottie.LottieView<Placeholder> where ValueProvider : Lottie.AnyValueProvider, ValueProvider : Swift.Equatable
  public func currentProgress(_ currentProgress: Lottie.AnimationProgressTime?) -> Lottie.LottieView<Placeholder>
  public func currentFrame(_ currentFrame: Lottie.AnimationFrameTime?) -> Lottie.LottieView<Placeholder>
  public func currentTime(_ currentTime: Foundation.TimeInterval?) -> Lottie.LottieView<Placeholder>
  public func reloadAnimationTrigger(_ value: some Equatable, showPlaceholder: Swift.Bool = true) -> Lottie.LottieView<Placeholder>
  @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
  public func getRealtimeAnimationProgress(_ realtimeAnimationProgress: SwiftUI.Binding<Lottie.AnimationProgressTime>?) -> some SwiftUI.View
  
  @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
  public func getRealtimeAnimationFrame(_ realtimeAnimationFrame: SwiftUI.Binding<Lottie.AnimationFrameTime>?) -> some SwiftUI.View
  
  public func dotLottieConfigurationComponents(_ dotLottieConfigurationComponents: Lottie.DotLottieConfigurationComponents) -> Lottie.LottieView<Placeholder>
  public typealias Body = @_opaqueReturnTypeOf("$s6Lottie0A4ViewV4bodyQrvp", 0) __<Placeholder>
}
public enum LottieContentMode : Swift.Int {
  case scaleToFill
  case scaleAspectFit
  case scaleAspectFill
  case redraw
  case center
  case top
  case bottom
  case left
  case right
  case topLeft
  case topRight
  case bottomLeft
  case bottomRight
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class LottieAnimationViewBase : AppKit.NSView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var wantsUpdateLayer: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isFlipped: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var contentMode: Lottie.LottieContentMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layout()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame frameRect: Foundation.NSRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class DotLottieCache : Lottie.DotLottieCacheProvider {
  public init()
  public static let sharedCache: Lottie.DotLottieCache
  public var cacheSize: Swift.Int {
    get
    set
  }
  public func clearCache()
  public func file(forKey key: Swift.String) -> Lottie.DotLottieFile?
  public func setFile(_ lottie: Lottie.DotLottieFile, forKey key: Swift.String)
  @objc deinit
}
extension Lottie.DotLottieCache : @unchecked Swift.Sendable {
}
extension Lottie.LottieAnimation {
  public typealias DownloadClosure = (Lottie.LottieAnimation?) -> Swift.Void
  final public var duration: Foundation.TimeInterval {
    get
  }
  final public var bounds: CoreFoundation.CGRect {
    get
  }
  final public var size: CoreFoundation.CGSize {
    get
  }
  public static func named(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, animationCache: (any Lottie.AnimationCacheProvider)? = LottieAnimationCache.shared) -> Lottie.LottieAnimation?
  public static func filepath(_ filepath: Swift.String, animationCache: (any Lottie.AnimationCacheProvider)? = LottieAnimationCache.shared) -> Lottie.LottieAnimation?
  public static func asset(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, animationCache: (any Lottie.AnimationCacheProvider)? = LottieAnimationCache.shared) -> Lottie.LottieAnimation?
  public static func from(data: Foundation.Data, strategy: Lottie.DecodingStrategy = LottieConfiguration.shared.decodingStrategy) throws -> Lottie.LottieAnimation
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
  public static func loadedFrom(url: Foundation.URL, session: Foundation.URLSession = .shared, animationCache: (any Lottie.AnimationCacheProvider)? = LottieAnimationCache.shared) async -> Lottie.LottieAnimation?
  #endif
  public static func loadedFrom(url: Foundation.URL, session: Foundation.URLSession = .shared, closure: @escaping Lottie.LottieAnimation.DownloadClosure, animationCache: (any Lottie.AnimationCacheProvider)? = LottieAnimationCache.shared)
  final public func progressTime(forMarker named: Swift.String) -> Lottie.AnimationProgressTime?
  final public func frameTime(forMarker named: Swift.String) -> Lottie.AnimationFrameTime?
  final public func durationFrameTime(forMarker named: Swift.String) -> Lottie.AnimationFrameTime?
  final public func progressTime(forFrame frameTime: Lottie.AnimationFrameTime, clamped: Swift.Bool = true) -> Lottie.AnimationProgressTime
  final public func frameTime(forProgress progressTime: Lottie.AnimationProgressTime) -> Lottie.AnimationFrameTime
  final public func time(forFrame frameTime: Lottie.AnimationFrameTime) -> Foundation.TimeInterval
  final public func frameTime(forTime time: Foundation.TimeInterval) -> Lottie.AnimationFrameTime
}
extension Foundation.Bundle : @unchecked Swift.Sendable {
}
public enum LayerType : Swift.Int, Swift.Codable {
  case precomp
  case solid
  case image
  case null
  case shape
  case text
  case unknown
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MatteType : Swift.Int, Swift.Codable {
  case none
  case add
  case invert
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BlendMode : Swift.Int, Swift.Codable {
  case normal
  case multiply
  case screen
  case overlay
  case darken
  case lighten
  case colorDodge
  case colorBurn
  case hardLight
  case softLight
  case difference
  case exclusion
  case hue
  case saturation
  case color
  case luminosity
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
final public class GradientValueProvider {
  public init(block: @escaping Lottie.GradientValueProvider.ColorsValueBlock, locations: Lottie.GradientValueProvider.ColorLocationsBlock? = nil)
  public init(_ colors: [Lottie.LottieColor], locations: [Swift.Double] = [])
  public typealias ColorsValueBlock = (CoreFoundation.CGFloat) -> [Lottie.LottieColor]
  public typealias ColorLocationsBlock = (CoreFoundation.CGFloat) -> [Swift.Double]
  final public var colors: [Lottie.LottieColor] {
    get
    set
  }
  final public var locations: [Swift.Double] {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: Lottie.ValueProviderStorage<[Swift.Double]> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension Lottie.GradientValueProvider : Swift.Equatable {
  public static func == (lhs: Lottie.GradientValueProvider, rhs: Lottie.GradientValueProvider) -> Swift.Bool
}
public struct DotLottieConfiguration {
  public var id: Swift.String
  public var loopMode: Lottie.LottieLoopMode
  public var speed: Swift.Double
  public var imageProvider: (any Lottie.AnimationImageProvider)? {
    get
  }
}
public struct DotLottieConfigurationComponents : Swift.OptionSet {
  public init(rawValue: Swift.Int)
  public static let imageProvider: Lottie.DotLottieConfigurationComponents
  public static let loopMode: Lottie.DotLottieConfigurationComponents
  public static let animationSpeed: Lottie.DotLottieConfigurationComponents
  public static let all: Lottie.DotLottieConfigurationComponents
  public static let none: Lottie.DotLottieConfigurationComponents
  public let rawValue: Swift.Int
  public typealias ArrayLiteralElement = Lottie.DotLottieConfigurationComponents
  public typealias Element = Lottie.DotLottieConfigurationComponents
  public typealias RawValue = Swift.Int
}
public enum DecodingStrategy : Swift.Hashable {
  case legacyCodable
  case dictionaryBased
  public static func == (a: Lottie.DecodingStrategy, b: Lottie.DecodingStrategy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ReducedMotionOption {
  case specific(Lottie.ReducedMotionMode)
  case dynamic(any Lottie.ReducedMotionOptionProvider, dataID: Swift.AnyHashable)
}
extension Lottie.ReducedMotionOption {
  public static var standardMotion: Lottie.ReducedMotionOption {
    get
  }
  public static var reducedMotion: Lottie.ReducedMotionOption {
    get
  }
  public static var systemReducedMotionToggle: Lottie.ReducedMotionOption {
    get
  }
}
extension Lottie.ReducedMotionOption {
  public var currentReducedMotionMode: Lottie.ReducedMotionMode {
    get
  }
}
extension Lottie.ReducedMotionOption : Swift.Hashable {
  public static func == (lhs: Lottie.ReducedMotionOption, rhs: Lottie.ReducedMotionOption) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ReducedMotionMode : Swift.Hashable {
  case standardMotion
  case reducedMotion
  public static func == (a: Lottie.ReducedMotionMode, b: Lottie.ReducedMotionMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ReducedMotionOptionProvider {
  var currentReducedMotionMode: Lottie.ReducedMotionMode { get }
}
public struct SystemReducedMotionOptionProvider : Lottie.ReducedMotionOptionProvider {
  public init()
  public var currentReducedMotionMode: Lottie.ReducedMotionMode {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
public struct LottieSwitch {
  public init(animation: Lottie.LottieAnimation?)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public func configure(_ configure: @escaping (Lottie.AnimatedSwitch) -> Swift.Void) -> Lottie.LottieSwitch
  public func configuration(_ configuration: Lottie.LottieConfiguration) -> Lottie.LottieSwitch
  public func isOn(_ binding: SwiftUI.Binding<Swift.Bool>) -> Lottie.LottieSwitch
  public func onAnimation(fromProgress onStartProgress: Lottie.AnimationProgressTime, toProgress onEndProgress: Lottie.AnimationProgressTime) -> Lottie.LottieSwitch
  public func offAnimation(fromProgress offStartProgress: Lottie.AnimationProgressTime, toProgress offEndProgress: Lottie.AnimationProgressTime) -> Lottie.LottieSwitch
  public func valueProvider<ValueProvider>(_ valueProvider: ValueProvider, for keypath: Lottie.AnimationKeypath) -> Lottie.LottieSwitch where ValueProvider : Lottie.AnyValueProvider, ValueProvider : Swift.Equatable
  public typealias Body = @_opaqueReturnTypeOf("$s6Lottie0A6SwitchV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers final public class DotLottieFile {
  public struct Animation {
    public let animation: Lottie.LottieAnimation
    public let configuration: Lottie.DotLottieConfiguration
  }
  final public var animations: [Lottie.DotLottieFile.Animation] {
    get
  }
  @objc deinit
}
extension Lottie.DotLottieFile : @unchecked Swift.Sendable {
}
final public class LottieLogger {
  public init(assert: @escaping Lottie.LottieLogger.Assert = { condition, message, file, line in
      // If we default to `Swift.assert` directly with `assert: Assert = Swift.assert`,
      // the call will unexpectedly not respect the -O flag and will crash in release
      // https://github.com/apple/swift/issues/60249
      Swift.assert(condition(), message(), file: file, line: line)
    }, assertionFailure: @escaping Lottie.LottieLogger.AssertionFailure = { message, file, line in
      // If we default to `Swift.assertionFailure` directly with
      // `assertionFailure: AssertionFailure = Swift.assertionFailure`,
      // the call will unexpectedly not respect the -O flag and will crash in release
      // https://github.com/apple/swift/issues/60249
      Swift.assertionFailure(message(), file: file, line: line)
    }, warn: @escaping Lottie.LottieLogger.Warn = { message, _, _ in
    }, info: @escaping Lottie.LottieLogger.Info = { message in
    })
  public typealias Assert = (_ condition: @autoclosure () -> Swift.Bool, _ message: @autoclosure () -> Swift.String, _ fileID: Swift.StaticString, _ line: Swift.UInt) -> Swift.Void
  public typealias AssertionFailure = (_ message: @autoclosure () -> Swift.String, _ fileID: Swift.StaticString, _ line: Swift.UInt) -> Swift.Void
  public typealias Warn = (_ message: @autoclosure () -> Swift.String, _ fileID: Swift.StaticString, _ line: Swift.UInt) -> Swift.Void
  public typealias Info = (_ message: @autoclosure () -> Swift.String) -> Swift.Void
  public static var shared: Lottie.LottieLogger
  final public func assert(_ condition: @autoclosure () -> Swift.Bool, _ message: @autoclosure () -> Swift.String = String(), fileID: Swift.StaticString = #fileID, line: Swift.UInt = #line)
  final public func assertionFailure(_ message: @autoclosure () -> Swift.String = String(), fileID: Swift.StaticString = #fileID, line: Swift.UInt = #line)
  final public func warn(_ message: @autoclosure () -> Swift.String = String(), fileID: Swift.StaticString = #fileID, line: Swift.UInt = #line)
  final public func info(_ message: @autoclosure () -> Swift.String = String())
  @objc deinit
}
extension Lottie.LottieLogger {
  public static var printToConsole: Lottie.LottieLogger {
    get
  }
}
@available(*, deprecated, message: "Use DefaultAnimationCache instead, which is thread-safe and automatically responds to memory pressure.")
public typealias LRUAnimationCache = Lottie.DefaultAnimationCache
final public class PointValueProvider {
  public init(block: @escaping Lottie.PointValueProvider.PointValueBlock)
  public init(_ point: CoreFoundation.CGPoint)
  public typealias PointValueBlock = (CoreFoundation.CGFloat) -> CoreFoundation.CGPoint
  final public var point: CoreFoundation.CGPoint {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: Lottie.ValueProviderStorage<Lottie.LottieVector3D> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension Lottie.PointValueProvider : Swift.Equatable {
  public static func == (lhs: Lottie.PointValueProvider, rhs: Lottie.PointValueProvider) -> Swift.Bool
}
final public class Keyframe<T> {
  public init(_ value: T, spatialInTangent: Lottie.LottieVector3D? = nil, spatialOutTangent: Lottie.LottieVector3D? = nil)
  public init(value: T, time: Lottie.AnimationFrameTime, isHold: Swift.Bool = false, inTangent: Lottie.LottieVector2D? = nil, outTangent: Lottie.LottieVector2D? = nil, spatialInTangent: Lottie.LottieVector3D? = nil, spatialOutTangent: Lottie.LottieVector3D? = nil)
  final public let value: T
  final public let time: Lottie.AnimationFrameTime
  final public let isHold: Swift.Bool
  final public let inTangent: Lottie.LottieVector2D?
  final public let outTangent: Lottie.LottieVector2D?
  final public let spatialInTangent: Lottie.LottieVector3D?
  final public let spatialOutTangent: Lottie.LottieVector3D?
  @objc deinit
}
extension Lottie.Keyframe : Swift.Equatable where T : Swift.Equatable {
  public static func == (lhs: Lottie.Keyframe<T>, rhs: Lottie.Keyframe<T>) -> Swift.Bool
}
extension Lottie.Keyframe : Swift.Hashable where T : Swift.Hashable {
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}
extension Lottie.Keyframe : Swift.Sendable where T : Swift.Sendable {
}
public protocol AnimationImageProvider {
  var cacheEligible: Swift.Bool { get }
  func imageForAsset(asset: Lottie.ImageAsset) -> CoreGraphics.CGImage?
  func contentsGravity(for asset: Lottie.ImageAsset) -> QuartzCore.CALayerContentsGravity
}
extension Lottie.AnimationImageProvider {
  public var cacheEligible: Swift.Bool {
    get
  }
  public func contentsGravity(for _: Lottie.ImageAsset) -> QuartzCore.CALayerContentsGravity
}
public protocol Interpolatable : Lottie.AnyInterpolatable {
  func interpolate(to: Self, amount: CoreFoundation.CGFloat) -> Self
}
public protocol SpatialInterpolatable : Lottie.AnyInterpolatable {
  func interpolate(to: Self, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> Self
}
public protocol AnyInterpolatable {
  func _interpolate(to: Self, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> Self
}
extension Lottie.Interpolatable {
  public func _interpolate(to: Self, amount: CoreFoundation.CGFloat, spatialOutTangent _: CoreFoundation.CGPoint?, spatialInTangent _: CoreFoundation.CGPoint?) -> Self
}
extension Lottie.SpatialInterpolatable {
  public func interpolate(to: Self, amount: CoreFoundation.CGFloat) -> Self
  public func _interpolate(to: Self, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> Self
}
extension Swift.Double : Lottie.Interpolatable {
}
extension CoreFoundation.CGFloat : Lottie.Interpolatable {
}
extension Swift.Float : Lottie.Interpolatable {
}
extension Lottie.Interpolatable where Self : Swift.BinaryFloatingPoint {
  public func interpolate(to: Self, amount: CoreFoundation.CGFloat) -> Self
}
extension CoreFoundation.CGRect : Lottie.Interpolatable {
  public func interpolate(to: CoreFoundation.CGRect, amount: CoreFoundation.CGFloat) -> CoreFoundation.CGRect
}
extension CoreFoundation.CGSize : Lottie.Interpolatable {
  public func interpolate(to: CoreFoundation.CGSize, amount: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
}
extension CoreFoundation.CGPoint : Lottie.SpatialInterpolatable {
  public func interpolate(to: CoreFoundation.CGPoint, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> CoreFoundation.CGPoint
}
extension Lottie.LottieColor : Lottie.Interpolatable {
  public func interpolate(to: Lottie.LottieColor, amount: CoreFoundation.CGFloat) -> Lottie.LottieColor
}
extension Lottie.LottieVector1D : Lottie.Interpolatable {
  public func interpolate(to: Lottie.LottieVector1D, amount: CoreFoundation.CGFloat) -> Lottie.LottieVector1D
}
extension Lottie.LottieVector2D : Lottie.SpatialInterpolatable {
  public func interpolate(to: Lottie.LottieVector2D, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> Lottie.LottieVector2D
}
extension Lottie.LottieVector3D : Lottie.SpatialInterpolatable {
  public func interpolate(to: Lottie.LottieVector3D, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> Lottie.LottieVector3D
}
extension Swift.Array : Lottie.Interpolatable, Lottie.AnyInterpolatable where Element : Lottie.Interpolatable {
  public func interpolate(to: [Element], amount: CoreFoundation.CGFloat) -> [Element]
}
extension Lottie.LottieNSControlState : Swift.Equatable {}
extension Lottie.LottieNSControlState : Swift.Hashable {}
extension Lottie.CoordinateSpace : Swift.Equatable {}
extension Lottie.CoordinateSpace : Swift.Hashable {}
extension Lottie.CoordinateSpace : Swift.RawRepresentable {}
@available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
extension Lottie.LottieButton : SwiftUI.View {}
extension Lottie.AnimatedSwitch.CancelBehavior : Swift.Equatable {}
extension Lottie.AnimatedSwitch.CancelBehavior : Swift.Hashable {}
extension Lottie.SizeValueProvider : Lottie.AnyValueProvider {}
extension Lottie.ColorValueProvider : Lottie.AnyValueProvider {}
extension Lottie.LottieBackgroundBehavior : Swift.Equatable {}
extension Lottie.LottieBackgroundBehavior : Swift.Hashable {}
extension Lottie.FloatValueProvider : Lottie.AnyValueProvider {}
@available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
extension Lottie.LottieView : SwiftUI.View {}
extension Lottie.LottieContentMode : Swift.Equatable {}
extension Lottie.LottieContentMode : Swift.Hashable {}
extension Lottie.LottieContentMode : Swift.RawRepresentable {}
extension Lottie.LayerType : Swift.Equatable {}
extension Lottie.LayerType : Swift.Hashable {}
extension Lottie.LayerType : Swift.RawRepresentable {}
extension Lottie.MatteType : Swift.Equatable {}
extension Lottie.MatteType : Swift.Hashable {}
extension Lottie.MatteType : Swift.RawRepresentable {}
extension Lottie.BlendMode : Swift.Equatable {}
extension Lottie.BlendMode : Swift.Hashable {}
extension Lottie.BlendMode : Swift.RawRepresentable {}
extension Lottie.GradientValueProvider : Lottie.AnyValueProvider {}
@available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
extension Lottie.LottieSwitch : SwiftUI.View {}
extension Lottie.PointValueProvider : Lottie.AnyValueProvider {}
